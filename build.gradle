buildscript {
	ext {
		kotlin_version = '1.3.50'
		spring_boot_version = '2.1.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
		classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0'
	}
}

plugins {
	id 'application'
	id 'idea'
	id 'org.jetbrains.kotlin.jvm' version '1.3.31'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.31'
}

apply from: 'gradle/build-git.gradle'
apply from: 'gradle/build-integration-test.gradle'
apply plugin: 'kotlin' // Required for Kotlin integration
apply plugin: "kotlin-spring" // https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
// apply plugin: 'findbugs'

group = 'com.amm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
mainClassName = 'com.amm.kafkafirst.Main'

jar {
	baseName = 'kafkafirst'
	version = '0.1.0'
}

repositories {
	mavenCentral()
}

bootJar {
	baseName = 'kafka-first-rest-service'
	version =  '0.1.0'
}

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-security'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	compile 'ch.qos.logback:logback-classic'
	compile 'org.slf4j:jul-to-slf4j'
	compile 'org.slf4j:log4j-over-slf4j'
	compile 'io.springfox:springfox-swagger2:2.9.2'
	compile 'io.springfox:springfox-swagger-ui:2.9.2'
	testCompile 'org.junit.jupiter:junit-jupiter-api'
	testCompile 'org.junit.jupiter:junit-jupiter-engine'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
}

jacocoTestReport {
	group = "Reporting"
	reports {
		xml.enabled true
		csv.enabled false
	}
}

// to see the test coverage
build.finalizedBy(jacocoTestReport)

/*
findbugs {
	ignoreFailures = false
	toolVersion = "3.0.1"
	sourceSets=[sourceSets.main]
	// excludeFilter = file("config/findbugs/excludeFilter.xml")
	reportsDir = file("$project.buildDir/reports/findbugs")
	effort = "max"
}*/

tasks.withType(FindBugs) {
	reports {
		xml.enabled false
		html.enabled true
	}
}

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

compileIntegrationTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

// check.dependsOn(ktlint)




